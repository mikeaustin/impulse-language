//
// tests.im
//

$ print: "] 3 - 2 + 1", with: 3 - 2 + 1

$ print: "] \"foo\" ++ \"bar\"", with: "foo" ++ "bar"

$ print: "] [1, 3, 3] ++ [4, 5]", with: [1, 3, 3] ++ [4, 5]

$ print: "] [1, 2, 3] == [1, 2, 3]", with: [1, 2, 3] == [1, 2, 3]

$ print: "[1, 2, 3] any: #even", with: [1, 2, 3] any: #even

$ print: "[1, 2, 3] all: |n| n >= 1", with: [1, 2, 3] all: |n| n >= 1

$ print: "] [1, 2, 3] fold: |a, n| a * n", with: [1, 2, 3] fold: |a, n| a * n



names = ["mark twain", "john smith"]

result = names map: |name| do
   name split: " " $ map: #capitalize $ reverse $ join: ", "
end

$ print: "] result == [\"Twain, Mark\", \"Smith, John\"]", with: result == ["Twain, Mark", "Smith, John"]



$ add-object: #library, with: |library| do
   library add-field: #join-string, with: ", "
   
   library add-method: #index:, with: |names| do
      result = names map: |name| do
         name split: " " $ map: #capitalize $ reverse $ join: self.join-string
      end
   end
end

$ print: "] library index: [\"mark twain\", \"john smith\"]", with: library index: ["mark twain", "john smith"]



$ add-object: #foo, with: |obj| do
   obj add-field: #x, with: 5
   
   obj add-method: #x, with: || do
      self.x
   end

   obj add-method: #x:, with: |x| do
      self.x = x
   end
end

$ print: "] foo x: 10", with: foo x: 10
$ print: "] foo x", with: foo x


$ print: "] \"0b\" ++ (0..1 $ sample: 8 $ join: \"\")", with: "0b" ++ (0..1 $ sample: 8 $ join: "")

upper = nil
"FooBar" $ tee: |n| upper = n upper-case $ lower-case

"foobar" with: |str| str[1] upper-case ++ str[2..str size]

// "foobar" >> |str| str[1] upper-case ++ str[2..str size]
// "foobar" >> [1] upper-case ++ [2..str size]

square = |x| x * x
5 $ with: square $ sqrt



"abc" split: "" $ join: ","

"abc" split: "" $ with: |array| do
   array fold: |string, next| string ++ "," ++ next
end

"abc" send: #upper-case, args: []
"abc" with: |c| c upper-case
"abc" with: #upper-case
"abc" upper-case



// Unoptimized version

doors = [false] ** 16

1..16 $ each: |i| do
   i..16 $ each: |j| do
      doors[j] = doors[j] not
   end, step: i
end

$ print: "] doors", with: doors

// Optimized version

doors = [false] ** 16

1..16 sqrt $ each: |i| do
   doors[i * i] = true
end

//1..100 sqrt $ each: |i| doors[i * i] = true

//(1..10) % 2 $ map: |n| n * n

// Vectorized version

// doors = [false] ** 100

// doors[(1..n) % i] = doors[(1..n) % i] not



$ add-module: #<string>, with: |string| do

   string add-method: #capitalize-trait, with: || do
      self[1] upper-case ++ self[2..self size]
   end

end

$ print: "\"foo\" capitalize-trait", with: "foo" capitalize-trait



/*
(1..10) step: 2 $ each: |n| n * n
(1..10) index $ each: |n| n * n

address = company address if-nil: "N/A"

factorial = |n| do
  n == 0 ? 1 : n * factorial [n - 1]
end
*/

/*
object <array> :: <object>

   method map: block
      local array = []

      self each: |item| do
         array append: block [item]
      end
      
      return array
   end

end
*/

