# ---------------------------------------------------------------------------- #
#
# Impulse Standard Library
#
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
# object <object>
# ---------------------------------------------------------------------------- #

object <object>

   field slots, reader: true
   field proto, reader: true

   method create
      self.slots = <map> clone
   end

   operator . slot-name
      return self get-slot: slot-name
   end

   operator ? expression
      if self != nil
         return expression []
      end
   end

   operator nil? default
      if self != nil
         return self
      else
          return default eval
      end
   end

   method resend
      if self.proto != nil
         self send: symbol, args: args, context: self
      end
   end

   method inspect
      self slots each: |name, value|
         print: name ~ " = " ~ value ~ "\n"
      end
   end

   method send: name, args: args
      local function = self get-slot: name

      if function ?
         return function eval: args, context: self
      else
         print "No such slot: ", name
      end
   end

   method write-on: stream
      stream << self
   end

end

# ---------------------------------------------------------------------------- #
# object <sequence>
# ---------------------------------------------------------------------------- #

object <sequence>

   method each: block
      # subclass responsibility
   end

   method map: block
      local array = []
 
      self each: |item|
         array << block [item]
      end

      return array
   end

   method fold: block
      self fold: block, with: nil
   end

   method fold: block, value
      local value = value void ? self[0]

      self each: |item|
         value = block eval: value, item
      end

      return value
   end

end

# ---------------------------------------------------------------------------- #
# object <number>
# ---------------------------------------------------------------------------- #

object <number>

   operator ^ exponent
      return [1..exponent] fold: |accum, value| accum * self
   end

   method each: block
      [1..self] each: |item| block eval: item
   end

end

object <integer> : <number>

end

object <float> : <number>

   field bytes

   method create
      self.bytes = <bytes> create: #float, size: 1
   end

   operator * value
      self.bytes[0] * value
   end

end

# ---------------------------------------------------------------------------- #
# object <string>
# ---------------------------------------------------------------------------- #

import object.bytes

object <string>

   field bytes

   method create
      self.bytes = <bytes> create
   end

   method each: block
      self.bytes each: |item| block eval: item
   end

   method replace: string, with: other
      local range = self find: string

      self[range] = other
   end

   method replace: <range> range, with: other
      # ...
   end

   method find: string
      local range = [0..0]

      self each: |char, index|
         if char == string[range to]
            if range to == 0
               range from = index
            end
            range to += 1
         end
      end

      return range
   end

end

# ---------------------------------------------------------------------------- #
# object <array>
# ---------------------------------------------------------------------------- #

import object.sequence

object <array> : <sequence>

   local bytes

   @request-for-enhancement: initialize data: \
    id       = 2868724,
    synopsis = "Enable time-travel"
   method create
      self.bytes = <bytes> create
   end

   method each: block
      self.bytes size each: |index|
         block eval: self.bytes[index]
      end
   end

   operator [index]
      if index < self.bytes size
         return self.bytes[index]
      end
   end

   operator [index] = value
      if index < self.bytes size
         self.bytes[index] = value
      end
   end

end

# ---------------------------------------------------------------------------- #
# object <stream>
# ---------------------------------------------------------------------------- #

object <stream>

   field handle

   method write: value
      # native write method
   end

end

# ---------------------------------------------------------------------------- #
# object <vector>
# ---------------------------------------------------------------------------- #

object <vector> : <sequence>

   local bytes

   method create
      self.bytes = <bytes> clone: <bytes>.float32
   end

   method each: block
      self.bytes each: |item| block eval: item
   end

   method size
      self.bytes size
   end

   operator *= vector
      [0..self.bytes size] each: |index|
         self.bytes[index] *= vector.bytes[index]
      end
   end

   method min
      [1..self.bytes size] each: |index|
         local value = 0

         if self.bytes[index] > value
            value = self.bytes[index]
         end

         return value
      end
   end

   method sum
      return self.bytes fold: |accum, item| accum + item
   end

   method mean
      self.bytes sum / self.bytes size
   end

end

# ---------------------------------------------------------------------------- #
# object <bytes>
# ---------------------------------------------------------------------------- #

object <bytes>

   const uint8   = 0,
         uint16  = 1,
         uint32  = 2,
         uint64  = 3,
         float32 = 4,
         float64 = 5
   field type, size

   method create: type = uint8
      self.type = type
   end

   method size: size
      self resize: size
   end

   operator [index]
      return self.bytes[index]
   end

   operator [index] = value
      return self.bytes[index] = value
   end

end

